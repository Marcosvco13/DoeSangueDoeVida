// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Projeto_Integrador.Models.Models
{
    public partial class DOACAO_SANGUEContext : DbContext
    {
        public DOACAO_SANGUEContext()
        {
        }

        public DOACAO_SANGUEContext(DbContextOptions<DOACAO_SANGUEContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsbuilder)

=> optionsbuilder.UseSqlServer("data source=Localhost\\SQLEXPRESS;Initial Catalog=DOACAO_SANGUE;Integrated Security=True; TrustServerCertificate=True");

        public virtual DbSet<CadDataHoraDisp> CadDataHoraDisp { get; set; }
        public virtual DbSet<CadDoacao> CadDoacao { get; set; }
        public virtual DbSet<CadDoador> CadDoador { get; set; }
        public virtual DbSet<CadEndereco> CadEndereco { get; set; }
        public virtual DbSet<CadLocalDoacao> CadLocalDoacao { get; set; }
        public virtual DbSet<Credenciais> Credenciais { get; set; }
        public virtual DbSet<FichaDoacao> FichaDoacao { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CadDataHoraDisp>(entity =>
            {
                entity.ToTable("CAD_DATA_HORA_DISP");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE");

                entity.Property(e => e.Disp).HasColumnName("DISP");

                entity.Property(e => e.IdLocal).HasColumnName("ID_LOCAL");

                entity.HasOne(d => d.IdLocalNavigation)
                    .WithMany(p => p.CadDataHoraDisp)
                    .HasForeignKey(d => d.IdLocal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CAD_DATA_HORA_DISP_fk0");
            });

            modelBuilder.Entity<CadDoacao>(entity =>
            {
                entity.ToTable("CAD_DOACAO");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DataHora)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_HORA");

                entity.Property(e => e.IdFichaUsuario).HasColumnName("ID_FICHA_USUARIO");

                entity.Property(e => e.IdLocal).HasColumnName("ID_LOCAL");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.HasOne(d => d.IdFichaUsuarioNavigation)
                    .WithMany(p => p.CadDoacao)
                    .HasForeignKey(d => d.IdFichaUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CAD_DOACAO_fk0");

                entity.HasOne(d => d.IdLocalNavigation)
                    .WithMany(p => p.CadDoacao)
                    .HasForeignKey(d => d.IdLocal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CAD_DOACAO_fk1");
            });

            modelBuilder.Entity<CadDoador>(entity =>
            {
                entity.ToTable("CAD_DOADOR");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.DataNasc)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_NASC");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOME");

                entity.Property(e => e.NomeMae)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOME_MAE");

                entity.Property(e => e.NomePai)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOME_PAI");

                entity.Property(e => e.OrgExp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ORG_EXP");

                entity.Property(e => e.Profissao)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROFISSAO");

                entity.Property(e => e.Religiao)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RELIGIAO");

                entity.Property(e => e.Rg)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RG");

                entity.Property(e => e.Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO");

                entity.Property(e => e.Telefone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");
            });

            modelBuilder.Entity<CadEndereco>(entity =>
            {
                entity.ToTable("CAD_ENDERECO");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Bairro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Complemento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COMPLEMENTO");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.Logradouro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LOGRADOURO");

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NUMERO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CadEndereco)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CAD_ENDERECO_fk0");
            });

            modelBuilder.Entity<CadLocalDoacao>(entity =>
            {
                entity.ToTable("CAD_LOCAL_DOACAO");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Ativo).HasColumnName("ATIVO");

                entity.Property(e => e.Bairro)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Complemento)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMPLEMENTO");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO");

                entity.Property(e => e.Logradouro)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOGRADOURO");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOME");

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NUMERO");

                entity.Property(e => e.Telefone)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");
            });

            modelBuilder.Entity<Credenciais>(entity =>
            {
                entity.ToTable("CREDENCIAIS");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN");

                entity.Property(e => e.Senha)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SENHA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Credenciais)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CREDENCIAIS_fk0");
            });

            modelBuilder.Entity<FichaDoacao>(entity =>
            {
                entity.ToTable("FICHA_DOACAO");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Fumante).HasColumnName("FUMANTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.Peso).HasColumnName("PESO");

                entity.Property(e => e.TempFumante)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TEMP_FUMANTE");

                entity.Property(e => e.TipoSangue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_SANGUE");

                entity.Property(e => e.UltimaDoacao)
                    .HasColumnType("datetime")
                    .HasColumnName("ULTIMA_DOACAO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FichaDoacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FICHA_DOACAO_fk0");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}